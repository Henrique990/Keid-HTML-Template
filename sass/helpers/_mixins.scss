// Mixin

// ----- Border Radius
//
// We use this to control border radius.
// $radius - Default: $global-radius || 5px
@mixin radius($radius:$global-radius) {
  @if $radius {
    @if $experimental {
      -webkit-border-radius: $radius;
    }
    border-radius: $radius;
  }
}

// ----- Side Radius
//
// We use this to create equal side border radius on elements.
// $side - Options: left, right, top, bottom
@mixin side-radius($side, $radius:$global-radius) {
  @if $side == left {
    @if $experimental {
      -moz-border-radius-bottomleft: $radius;
      -moz-border-radius-topleft: $radius;
      -webkit-border-bottom-left-radius: $radius;
      -webkit-border-top-left-radius: $radius;
    }
    border-bottom-left-radius: $radius;
    border-top-left-radius: $radius;
  }
  @else if $side == right {
    @if $experimental {
      -moz-border-radius-topright: $radius;
      -moz-border-radius-bottomright: $radius;
      -webkit-border-top-right-radius: $radius;
      -webkit-border-bottom-right-radius: $radius;
    }
    border-top-right-radius: $radius;
    border-bottom-right-radius: $radius;
  }
  @else if $side == top {
    @if $experimental {
      -moz-border-radius-topright: $radius;
      -moz-border-radius-topleft: $radius;
      -webkit-border-top-right-radius: $radius;
      -webkit-border-top-left-radius: $radius;
    }
    border-top-right-radius: $radius;
    border-top-left-radius: $radius;
  }
  @else if $side == bottom {
    @if $experimental {
      -moz-border-radius-bottomright: $radius;
      -moz-border-radius-bottomleft: $radius;
      -webkit-border-bottom-right-radius: $radius;
      -webkit-border-bottom-left-radius: $radius;
    }
    border-bottom-right-radius: $radius;
    border-bottom-left-radius: $radius;
  }
}

// ----- Unside Radius
//
// We use this to create equal side border radius on elements.
// $side - Options: lefttop, righttop, leftbottom, rightbottom
@mixin unside-radius($side, $radius:$global-radius) {
  @if $side == lefttop {
    -webkit-border-radius: $radius;
    -webkit-border-top-left-radius: 0;
    -moz-border-radius: $radius;
    -moz-border-radius-topleft: 0;
    border-radius: $radius;
    border-top-left-radius: 0;
  }
  @else if $side == righttop {
    -webkit-border-radius: $radius;
    -webkit-border-top-right-radius: 0;
    -moz-border-radius: $radius;
    -moz-border-radius-topright: 0;
    border-radius: $radius;
    border-top-right-radius: 0;
  }
  @else if $side == leftbottom {
    -webkit-border-radius: $radius;
    -webkit-border-bottom-left-radius: 0;
    -moz-border-radius: $radius;
    -moz-border-radius-bottomleft: 0;
    border-radius: $radius;
    border-bottom-left-radius: 0;
  }
  @else if $side == rightbottom {
    -webkit-border-radius: $radius;
    -webkit-border-bottom-right-radius: 0;
    -moz-border-radius: $radius;
    -moz-border-radius-bottomright: 0;
    border-radius: $radius;
    border-bottom-right-radius: 0;
  }
}

// ----- Box Sizing
//
// We use this to add box-sizing across browser prefixes
@mixin box-sizing($type:border-box) {
  @if $experimental {
    -moz-box-sizing: $type;
    -webkit-box-sizing: $type;
  }
  box-sizing: $type;
}

// ----- Triangle
//
// We use this to create equilateral triangles
// $triangle-size - Used to set border-size. No default, set a px or em size.
// $triangle-color - Used to set border-color which makes up triangle. No default
// $triangle-direction - Used to determine which direction triangle points. Options: top, bottom, left, right
@mixin css-triangle($triangle-size, $triangle-color, $triangle-direction) {
  content: "";
  display: block;
  width: 0;
  height: 0;
  border: inset $triangle-size;
  @if ($triangle-direction == top) {
    border-color: $triangle-color transparent transparent transparent;
    border-top-style: solid;
  }
  @if ($triangle-direction == bottom) {
    border-color: transparent transparent $triangle-color transparent;
    border-bottom-style: solid;
  }
  @if ($triangle-direction == left) {
    border-color: transparent transparent transparent $triangle-color;
    border-left-style: solid;
  }
  @if ($triangle-direction == right) {
    border-color: transparent $triangle-color transparent transparent;
    border-right-style: solid;
  }
}

// ----- Clearfix
//
// We use this to do clear floats
@mixin clearfix {
  *zoom:1;
  &:before, &:after { content: " "; display: table; }
  &:after { clear: both; }
}